//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Sources/Input/InputMasterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMasterControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMasterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMasterControls"",
    ""maps"": [
        {
            ""name"": ""LoadingControls"",
            ""id"": ""aad10ab8-e43e-4ed6-8256-1f93d7179be8"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""5eec46f4-753f-46ff-8507-6f2c5f892b65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""f1933067-f7d8-4c8a-9488-14fd27779ffc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4bb82a3-eb96-4f0e-82c9-ee7b4cebd57b"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60f774dd-8486-4e20-a262-792556e2b541"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenuControls"",
            ""id"": ""547624e3-f7cb-4818-8884-573a111b5ea6"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db038585-429c-43e4-8228-e7a2d5637fd4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""bde9c3ef-2b9d-4080-824f-714c3091e59c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c44b6d7c-8002-40ba-8e09-2585738401f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""799b986b-604f-49b8-9c00-f74fab76ca3e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9422e70e-4e5d-4f06-a6be-d88b807c2f09"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0b623aae-4ec7-4cb9-b845-7bed3b3f6ac5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a45fd613-4e6f-4026-b3b9-5e83352ec0ab"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f602aff6-3eb4-4d4c-9f73-bb390354effa"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8fbf9d1e-51d7-4568-a4f8-bccb180ab3cf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bc96c47-8841-42e1-b4eb-6eb05f4ddb29"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LoadingControls
        m_LoadingControls = asset.FindActionMap("LoadingControls", throwIfNotFound: true);
        m_LoadingControls_Submit = m_LoadingControls.FindAction("Submit", throwIfNotFound: true);
        m_LoadingControls_Look = m_LoadingControls.FindAction("Look", throwIfNotFound: true);
        // MainMenuControls
        m_MainMenuControls = asset.FindActionMap("MainMenuControls", throwIfNotFound: true);
        m_MainMenuControls_Navigate = m_MainMenuControls.FindAction("Navigate", throwIfNotFound: true);
        m_MainMenuControls_Point = m_MainMenuControls.FindAction("Point", throwIfNotFound: true);
        m_MainMenuControls_Click = m_MainMenuControls.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LoadingControls
    private readonly InputActionMap m_LoadingControls;
    private ILoadingControlsActions m_LoadingControlsActionsCallbackInterface;
    private readonly InputAction m_LoadingControls_Submit;
    private readonly InputAction m_LoadingControls_Look;
    public struct LoadingControlsActions
    {
        private @InputMasterControls m_Wrapper;
        public LoadingControlsActions(@InputMasterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_LoadingControls_Submit;
        public InputAction @Look => m_Wrapper.m_LoadingControls_Look;
        public InputActionMap Get() { return m_Wrapper.m_LoadingControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadingControlsActions set) { return set.Get(); }
        public void SetCallbacks(ILoadingControlsActions instance)
        {
            if (m_Wrapper.m_LoadingControlsActionsCallbackInterface != null)
            {
                @Submit.started -= m_Wrapper.m_LoadingControlsActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_LoadingControlsActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_LoadingControlsActionsCallbackInterface.OnSubmit;
                @Look.started -= m_Wrapper.m_LoadingControlsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_LoadingControlsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_LoadingControlsActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_LoadingControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public LoadingControlsActions @LoadingControls => new LoadingControlsActions(this);

    // MainMenuControls
    private readonly InputActionMap m_MainMenuControls;
    private IMainMenuControlsActions m_MainMenuControlsActionsCallbackInterface;
    private readonly InputAction m_MainMenuControls_Navigate;
    private readonly InputAction m_MainMenuControls_Point;
    private readonly InputAction m_MainMenuControls_Click;
    public struct MainMenuControlsActions
    {
        private @InputMasterControls m_Wrapper;
        public MainMenuControlsActions(@InputMasterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_MainMenuControls_Navigate;
        public InputAction @Point => m_Wrapper.m_MainMenuControls_Point;
        public InputAction @Click => m_Wrapper.m_MainMenuControls_Click;
        public InputActionMap Get() { return m_Wrapper.m_MainMenuControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMainMenuControlsActions instance)
        {
            if (m_Wrapper.m_MainMenuControlsActionsCallbackInterface != null)
            {
                @Navigate.started -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnNavigate;
                @Navigate.performed -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnNavigate;
                @Navigate.canceled -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnNavigate;
                @Point.started -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnPoint;
                @Click.started -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_MainMenuControlsActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_MainMenuControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public MainMenuControlsActions @MainMenuControls => new MainMenuControlsActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface ILoadingControlsActions
    {
        void OnSubmit(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IMainMenuControlsActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
